generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  orders     Order[]     @relation("StoreToOrder")
}

model Billboard {
  id            String        @id @default(uuid())
  storeId       String
  store         Store         @relation("StoreToBillboard", fields: [storeId], references: [id])
  label         String
  imageUrl      String
  categories    Category[]
  subcategories Subcategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([storeId])
}

model Category {
  id            String        @id @default(uuid())
  storeId       String
  store         Store         @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId   String
  billboard     Billboard     @relation(fields: [billboardId], references: [id])
  name_hu       String        @default("")
  name_ro       String        @default("")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subcategories Subcategory[] @relation("SubcategoryToCategory")

  @@index([storeId])
  @@index([billboardId])
}

model Subcategory {
  id          String    @id @default(uuid())
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name_hu     String    @default("")
  name_ro     String    @default("")
  categoryId  String
  category    Category  @relation("SubcategoryToCategory", fields: [categoryId], references: [id])
  products    Product[] @relation("SubcategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([billboardId])
  @@index([categoryId])
}

model Product {
  id             String      @id @default(uuid())
  storeId        String
  store          Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  subcategoryId  String
  subcategory    Subcategory @relation("SubcategoryToProduct", fields: [subcategoryId], references: [id])
  price          Decimal
  quantity       Int
  name_hu        String
  name_ro        String
  description_hu String
  description_ro String
  isFeatured     Boolean
  isArchived     Boolean
  sizeId         String
  size           Size        @relation(fields: [sizeId], references: [id])
  colorId        String
  color          Color       @relation(fields: [colorId], references: [id])
  images         Image[]
  orderItems     OrderItem[] @relation("OrderItemToProduct")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([storeId])
  @@index([subcategoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation("OrderItemToProduct", fields: [productId], references: [id])
  quantity  Int     @default(1)

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
